#!/bin/bash
#
# make-omnibus - create self-contained tarballs for distribution

set -e

# force permissive umask (for asset creation default permissions)
umask 0022

PATH=$PATH:/opt/omni/bin
PREFIX=/opt/circonus
NAD_REPO="https://github.com/circonus-labs/nad.git"
BUILDDIR="/tmp/nad-omnibus-build"
INSTALLDIR="/tmp/nad-omnibus-install"
PUBLISHDIR="/mnt/node-agent"
NODE_VERSION="4.4.5"
# CentOS 5/6 wget is unable to verify nodejs cert
# ERROR: certificate common name `*.nodejs.org' doesn't match requested host name `nodejs.org'.
# To connect to nodejs.org insecurely, use `--no-check-certificate'.
WGET_OPTS=""

if [[ ! -d $PUBLISHDIR ]]; then
    echo "Destination for package files ($PUBLISHDIR) does not exist; all is doomed."
    exit 1
fi

PLATFORM=$(uname -m)
if [[ "$PLATFORM" == "i686" ]]; then
    PLATFORM="i386"  # Normalize
fi

OS=""
if [[ -f /etc/redhat-release ]]; then
    INSTALL_TARGET="install-rhel"
    relver=$(sed -e 's/.*release \(.\).*/\1/' /etc/redhat-release)
    case "$relver" in
        5)
            OS="rhel5"
            WGET_OPTS="--no-check-certificate"
            export GIT_SSL_NO_VERIFY=true
            ;;
        6)
            OS="rhel6"
            WGET_OPTS="--no-check-certificate"
            ;;
        7)
            OS="rhel7"
            ;;
        *)
            echo "Unsupported release: $relver"
            exit 1
            ;;
    esac
elif [[ -f /etc/lsb-release ]]; then
    INSTALL_TARGET="install-ubuntu"
    . /etc/lsb-release
    relver=$DISTRIB_RELEASE
    [[ "$PLATFORM" == "x86_64" ]] && PLATFORM="amd64"
    case "$relver" in
        12.04)
            OS="ubuntu.12.04"
            fpm="/var/lib/gems/1.8/gems/fpm-0.4.29/bin/fpm"
            ;;
        14.04)
            OS="ubuntu.14.04"
            fpm="/usr/local/bin/fpm"
            ;;
        16.04)
            OS="ubuntu.16.04"
            fpm="/usr/local/bin/fpm"
            ;;
        *)
            echo "Unsupported release: $relver"
            exit 1
            ;;
    esac
fi

if [[ -x /usr/bin/nproc ]]; then
    NPROC=$(nproc)
else
    NPROC=$(grep -c ^processor /proc/cpuinfo)
fi
let MAKE_JOBS="$NPROC + ($NPROC / 2)" # 1.5x the number of CPUs

echo "Building for $OS $PLATFORM"
echo

if [[ ! -d $BUILDDIR ]]; then
    echo "--- Creating top-level build directory"
    mkdir $BUILDDIR
fi
if [[ -d $INSTALLDIR ]]; then
    echo "--- Clearing existing install directory hierarchy"
    rm -rf $INSTALLDIR
    mkdir $INSTALLDIR
else
    echo "--- Creating top-level install directory"
    mkdir $INSTALLDIR
fi

build_nodejs() {
    local node_src_tgz="node-v${NODE_VERSION}.tar.gz"
    local node_src_url="http://nodejs.org/dist/v${NODE_VERSION}/${node_src_tgz}"

    echo "Checking for NodeJS v${NODE_VERSION} source archive"
    pushd $BUILDDIR > /dev/null
    if [[ ! -f $node_src_tgz ]]; then
        echo "--- node source archive not found, downloading."
        wget $WGET_OPTS $node_src_url
    fi
    echo "--- extracting source archive"
    tar zxf $node_src_tgz
    popd > /dev/null

    echo "Building node"
    pushd $BUILDDIR/node-$NODE_VERSION > /dev/null
    make clean || make distclean
    ./configure --prefix=$PREFIX/embedded
    make -j $MAKE_JOBS
    make DESTDIR=$INSTALLDIR install
    popd > /dev/null
}

install_binary_nodejs() {
    local node_binary_arch
    local node_binary_tgz
    local node_binary_url
    local node_dest_dir="${INSTALLDIR}/${PREFIX}/embedded"

    [[ "$PLATFORM" == "i386" ]] && node_binary_arch="x86"
    [[ "$PLATFORM" == "x86_64" || "$PLATFORM" == "amd64" ]] && node_binary_arch="x64"
    node_binary_tgz="node-v${NODE_VERSION}-linux-${node_binary_arch}.tar.gz"
    node_binary_url="https://nodejs.org/dist/v${NODE_VERSION}/${node_binary_tgz}"

    echo "Checking for NodeJS v${NODE_VERSION} ${PLATFORM} binary archive"
    pushd $BUILDDIR > /dev/null
    if [[ ! -f $node_binary_tgz ]]; then
        echo "--- node binary archive not found, downloading."
        wget $WGET_OPTS $node_binary_url
    fi
    echo "--- extracting binary archive"
    mkdir -pv $node_dest_dir
    tar zxf $node_binary_tgz -C $node_dest_dir --strip-components=1
    popd > /dev/null
}

install_nodejs() {
    echo "Installing NodeJS v${NODE_VERSION}"
    if [[ $OS =~ ^rhel ]]; then
        install_binary_nodejs
    elif [[ $OS =~ ^ubuntu ]]; then
        install_binary_nodejs
    else
        build_nodejs
    fi
}

nad_src() {
    local force_clone=1

    echo "Checking for nad source"

    if [[ -d $BUILDDIR/nad/.git ]]; then
        pushd $BUILDDIR/nad > /dev/null
        echo "--- checkout exists, pulling latest revision"
        set +e
        git pull
        force_clone=$?
        [[ $force_clone -ne 0 ]] && echo "--- 'git pull' exited with code:$force_clone"
        set -e
        popd > /dev/null
    fi

    if [[ $force_clone -ne 0 ]]; then
        pushd $BUILDDIR > /dev/null
        [[ -d nad ]] && {
            echo "--- removing invalid nad directory"
            rm -rf nad
        }
        echo "--- cloning from $NAD_REPO"
        git clone $NAD_REPO
        popd > /dev/null
    fi

    pushd $BUILDDIR/nad > /dev/null
    # Looks like: 2013-07-23 11:23:43 -0700
    NAD_VERSION=$(git log -1  --format=format:%ad --date=iso)
    # Normalize to UTC
    # This requires GNU date-- maybe there's a better way
    TSTAMP=$(date -d "$NAD_VERSION" -u +%Y%m%dT%H%M%SZ)
    popd > /dev/null
}

build_nad() {
    echo "Building nad"
    pushd $BUILDDIR/nad > /dev/null
    make DESTDIR=$INSTALLDIR PREFIX=$PREFIX RUNSTATE_USER=`id -u` $INSTALL_TARGET
    popd > /dev/null

    echo "Removing plugins not related to Linux $OS"
    pushd "${INSTALLDIR}/${PREFIX}/etc/node-agent.d" > /dev/null
    # list of plugins not applicable to Linux
    plugin_list="illumos freebsd openbsd smartos windows pf"
    for plugin in $plugin_list; do
        [[ -d $plugin ]] && {
            echo "Removing $plugin plugin(s)"
            rm -rf $plugin
        }
    done
    popd > /dev/null
}

make_package() {
    if [[ $OS =~ ^rhel ]]; then
        echo "Creating nad-omnibus RPM for $OS $PLATFORM"
        sed -e "s#@@RPMVER@@#$TSTAMP#" omnibus-rpm.spec.in > omnibus-rpm.spec
        rpmbuild -bb omnibus-rpm.spec
        cp ~/rpmbuild/RPMS/*/nad-omnibus-$TSTAMP-1.el*.*.rpm $PUBLISHDIR/packages/
        rm -f omnibus-rpm.spec
    elif [[ $OS =~ ^ubuntu ]]; then
        echo "Creating nad-omnibus DEB for $OS $PLATFORM"
        deb_file="${BUILDDIR}/nad-omnibus-${TSTAMP}-1.${OS}_${PLATFORM}.deb"

        if [[ -f $deb_file ]]; then
            echo "Previously built at this version, removing file"
            rm -f $deb_file
        fi

        $fpm -s dir -t deb -n nad-omnibus -v $TSTAMP --iteration 1 -C $INSTALLDIR \
            -p $deb_file --url "https://github.com/circonus-labs/nad" \
            --vendor "Circonus, Inc." --license "BSD" \
            --maintainer "Circonus Support <packaging@circonus.com>" \
            --description "A very thin, simply managed host agent written in Node.js" \
            --deb-user root --deb-group root \
            --after-install $BUILDDIR/nad/packaging/ubuntu-postinstall.sh \
            --after-remove $BUILDDIR/nad/packaging/ubuntu-postremove.sh \
            $(cd $INSTALLDIR; find . -not -type d | sed -e 's#^\./##')
        cp $deb_file $PUBLISHDIR/packages/
    else
        echo "Creating omnibus tarball"
        ARCHIVE="$BUILDDIR/nad-omnibus-${TSTAMP}-${OS}-${PLATFORM}.tar"
        pushd $INSTALLDIR > /dev/null
        tar cf $ARCHIVE .
        gzip $ARCHIVE
        echo "--- created ${ARCHIVE}.gz"
        popd > /dev/null
        cp ${ARCHIVE}.gz $PUBLISHDIR/
    fi
}

install_nodejs
nad_src
build_nad
make_package

echo "Done."
exit 0

# Vim hints
# vim:ts=4:sw=4:et:
