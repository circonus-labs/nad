#!/bin/bash
#
# make-omnibus - create self-contained tarballs for distribution

set -e

PATH=$PATH:/opt/omni/bin
PREFIX=/opt/circonus
NAD_REPO="https://github.com/circonus-labs/nad.git"
BUILDDIR="/tmp/nad-omnibus-build"
INSTALLDIR="/tmp/nad-omnibus-install"
PUBLISHDIR="/mnt/node-agent"

if [[ ! -d $PUBLISHDIR ]]; then
    echo "Destination for package files ($PUBLISHDIR) does not exist; all is doomed."
    exit 1
fi

PLATFORM=$(uname -m)
if [[ "$PLATFORM" == "i686" ]]; then
    PLATFORM="i386"  # Normalize
fi

OS=""
if [[ -f /etc/redhat-release ]]; then
    INSTALL_TARGET="install-rhel"
    relver=$(sed -e 's/.*release \(.\).*/\1/' /etc/redhat-release)
    case "$relver" in
        5)
            OS="rhel5"
            export GIT_SSL_NO_VERIFY=true
            ;;
        6)
            OS="rhel6"
            ;;
        7)
            OS="rhel7"
            ;;
        *)
            echo "Unsupported release: $relver"
            exit 1
            ;;
    esac
elif [[ -f /etc/lsb-release ]]; then
    INSTALL_TARGET="install-ubuntu"
    . /etc/lsb-release
    relver=$DISTRIB_RELEASE
    [[ "$PLATFORM" == "x86_64" ]] && PLATFORM="amd64"
    case "$relver" in
        12.04)
            OS="ubuntu.12.04"
            fpm="/var/lib/gems/1.8/gems/fpm-0.4.29/bin/fpm"
            ;;
        14.04)
            OS="ubuntu.14.04"
            fpm="/usr/local/bin/fpm"
            ;;
        16.04)
            OS="ubuntu.16.04"
            fpm="/usr/local/bin/fpm"
            ;;
        *)
            echo "Unsupported release: $relver"
            exit 1
            ;;
    esac
fi

if [[ -x /usr/bin/nproc ]]; then
    NPROC=$(nproc)
else
    NPROC=$(grep -c ^processor /proc/cpuinfo)
fi
let MAKE_JOBS="$NPROC + ($NPROC / 2)" # 1.5x the number of CPUs

echo "Building for $OS $PLATFORM"
echo

if [[ ! -d $BUILDDIR ]]; then
    echo "--- Creating top-level build directory"
    mkdir $BUILDDIR
fi
if [[ -d $INSTALLDIR ]]; then
    echo "--- Clearing existing install directory hierarchy"
    rm -rf $INSTALLDIR
    mkdir $INSTALLDIR
else
    echo "--- Creating top-level install directory"
    mkdir $INSTALLDIR
fi

[[ "$PLATFORM" == "i386" ]] && NODE_ARCH="x86"
[[ "$PLATFORM" == "x86_64" || "$PLATFORM" == "amd64" ]] && NODE_ARCH="x64"
NODE_VER="4.4.5"
NODE_TGZ="node-v${NODE_VER}-linux-${NODE_ARCH}.tar.gz"
NODE_URL="https://nodejs.org/dist/v${NODE_VER}/${NODE_TGZ}"
install_prebuilt_nodejs() {
    local NODE_DEST_DIR="${INSTALLDIR}/${PREFIX}/embedded"
    echo "Checking for node-$NODE_VER prebuilt archive"
    pushd $BUILDDIR > /dev/null
    if [[ ! -f $NODE_TGZ ]]; then
        echo "--- node prebuilt archive not found, downloading."
        wget "$NODE_URL"
    fi
    echo "--- extracting node prebuilt archive"
    mkdir -pv $NODE_DEST_DIR
    tar zxf $NODE_TGZ -C $NODE_DEST_DIR --strip-components=1
    popd > /dev/null
}

nad_src() {
    echo "Checking for nad source"
    if [[ -d $BUILDDIR/nad ]]; then
        pushd $BUILDDIR/nad > /dev/null
        echo "--- checkout exists, pulling latest revision"
        git pull
        popd > /dev/null
    else
        pushd $BUILDDIR > /dev/null
        echo "--- no checkout, cloning from $NAD_REPO"
        git clone $NAD_REPO
        popd > /dev/null
    fi

    pushd $BUILDDIR/nad > /dev/null
    # Looks like: 2013-07-23 11:23:43 -0700
    NAD_VERSION=$(git log -1  --format=format:%ad --date=iso)
    # Normalize to UTC
    # This requires GNU date-- maybe there's a better way
    TSTAMP=$(date -d "$NAD_VERSION" -u +%Y%m%dT%H%M%SZ)
    popd > /dev/null
}

build_nad() {
    echo "Building nad"
    pushd $BUILDDIR/nad > /dev/null
    make DESTDIR=$INSTALLDIR PREFIX=$PREFIX RUNSTATE_USER=`id -u` $INSTALL_TARGET
    popd > /dev/null
}

make_package() {
    if [[ $OS =~ ^rhel ]]; then
        echo "Creating nad-omnibus RPM for $OS $PLATFORM"
        sed -e "s#@@RPMVER@@#$TSTAMP#" omnibus-rpm.spec.in > omnibus-rpm.spec
        rpmbuild -bb omnibus-rpm.spec
        cp ~/rpmbuild/RPMS/*/nad-omnibus-$TSTAMP-1.el*.*.rpm $PUBLISHDIR/packages/
        rm -f omnibus-rpm.spec
    elif [[ $OS =~ ^ubuntu ]]; then
        echo "Creating nad-omnibus DEB for $OS $PLATFORM"
        deb_file="${BUILDDIR}/nad-omnibus-${TSTAMP}-1.${OS}_${PLATFORM}.deb"
        $fpm -s dir -t deb -n nad-omnibus -v $TSTAMP --iteration 1 -C $INSTALLDIR \
            -p $deb_file --url "https://github.com/circonus-labs/nad" \
            --vendor "Circonus, Inc." --license "BSD" \
            --maintainer "Circonus Support <packaging@circonus.com>" \
            --description "A very thin, simply managed host agent written in Node.js" \
            --deb-user root --deb-group root \
            --after-install $BUILDDIR/nad/packaging/ubuntu-postinstall.sh \
            --after-remove $BUILDDIR/nad/packaging/ubuntu-postremove.sh \
            $(cd $INSTALLDIR; find . -not -type d | sed -e 's#^\./##')
        cp $deb_file $PUBLISHDIR/packages/
    else
        echo "Creating omnibus tarball"
        ARCHIVE="$BUILDDIR/nad-omnibus-${TSTAMP}-${OS}-${PLATFORM}.tar"
        pushd $INSTALLDIR > /dev/null
        tar cf $ARCHIVE .
        gzip $ARCHIVE
        echo "--- created ${ARCHIVE}.gz"
        popd > /dev/null
        cp ${ARCHIVE}.gz $PUBLISHDIR/
    fi
}

install_prebuilt_nodejs
nad_src
build_nad
make_package

echo "Done."
exit 0

# Vim hints
# vim:ts=4:sw=4:et:

