#!/usr/bin/env node
//
// Toss executables (scripts too) in /etc/node-agent.d
// Each program should produce lines as follows:
//    <name><whitespace><type>
// or:
//    <name><whitespace><type><whitespace><value>
//
// The first indicates the value is present an null
// the second indicates the valus is present and specific
//
var fs = require('fs'),
    sys = require('sys'),
    http = require('http'),
    url = require('url'),
    path = require('path'),
    nadapi = require('nad_circapi'),
    spawn = require('child_process').spawn,
    ext = /(?:\.([^.]+))?$/,
    past_results = {},
    scripts = {},
    scripts_once = {},
    creds = {},
    run_count = 0,
    generation = 0, do_index = false,
    api_setup = false, auth_token = null,
    target = null, hostname = null,
    brokerid = null, configfile = null,
    platform = process.platform,
    is_windows = (platform === "win32"),
    procre = null;

if (is_windows) {
  procre = /^(?!\.)([^\\]*?)(?:\..*)$/;
} else {
  procre = /^(?!\.)([^\/]*?)(?:\..*)$/;
}

var configdir = '/etc/node-agent.d',
    port = [],
    defaultport = [ [ 2609, null ] ],
    sslport = [],
    verify = false;

function help(err) {
  console.log(process.argv[1] + "\n" +
              "\t-h\t\t\tthis help message\n" +
              "\t-i\t\t\toffline inventory\n" +
              "\t-c <configdir>\t\tconfig dir\n" +
              "\t-p [ip:]<port>\t\tunsecured port\n" +
              "\t-s [ip:]<secureport>\tsecured port\n" +
              "\t-v\t\t\tverify secured traffic\n" + 
              "\t--authtoken\t\tCirconus API auth token to use, if passed will attempt to configure via the Circonus API then exit.\n" +
              "\t--target\t\tTarget Circonus will use to contact this host.\n" +
              "\t--hostname\t\tHostname used in check and graph names, if not passed we will attempt to look it up.\n" +
              "\t--brokerid\t\tID of the Circonus broker to configure the check on.\n" +
              "\t--configfile\t\tName of the file in the config directory to use for Circonus configuration.\n"
            );
  if(err) {
    console.log("\nError: " + err + "\n");
    process.exit(-1);
  }
}

function index(dir) {
  try { process.chdir(dir); }
  catch (e) {
    console.log("Cannot use configdir: " + configdir);
    console.log(e.message);
    process.exit(-1);
  }
  var catalog = {}, active = {}, missing = {};

  function build_catalog(dir) {
    dir = dir || "";
    try {
      var c = fs.readFileSync(path.join(".", dir, ".index.json"));
      var j = JSON.parse(c);
      catalog[dir] = j;
      for(var script in j) {
        try {
          var info = fs.statSync(path.join(".", dir, script));
          if(!info.isFile() || (!(is_windows) && (!(info.mode & 0100)))) throw Exception("");
        } catch(e) { missing[path.join(dir, script)] = true; }
      }
    } catch(e) { }
    var files = fs.readdirSync(path.join(".", dir));
    for(var i=0; i<files.length; i++) {
      var info = fs.statSync(path.join(".", dir, files[i]));
      if(info && info.isDirectory()) {
        build_catalog(path.join(dir, files[i]));
      }
    }
  }
  build_catalog();
  var files = fs.readdirSync(".");
  var base = fs.realpathSync(".") + path.sep;
  for(var i=0; i<files.length; i++) {
    var m = procre.exec(files[i]);
    if(!m) continue;
    var extension = ext.exec(files[i])[1];
    if (extension === "conf") continue;
    var info = fs.lstatSync(files[i]);
    var realpath = files[i];
    if(info.isSymbolicLink()) info = fs.statSync(files[i]);
    if(info.isFile() && (is_windows || info.mode & 0100)) {
      var realpath = fs.realpathSync(files[i]);
      if(realpath.indexOf(base) == 0)
        realpath = realpath.substr(base.length);
      active[realpath] = m[1];
    }
  }
  for(var module in catalog) {
    for(var script in catalog[module]) {
      var m = procre.exec(script);
      if(!m) console.log("! " + script + ": MALFORMED NAME");
      else {
        var extension = ext.exec(script)[1];
        if (extension === "conf") {
          console.log("! " + script + ": CANNOT EXECUTE CONF FILES");
          continue;
        }
        var file = path.join(module, script);
        var desc = catalog[module][script];
        var on = (file in active) ? "*" : " ";
        if(file in missing) on = "!";
        delete active[file];
        console.log(on + " " +
                    path.join(module, m[1]) + ": " + desc);
      }
    }
  }
  var first = true;
  for(var file in active) {
    if(first) { console.log("\n  !!! Rogue scripts !!!"); first = false; }
    console.log("* " + file + ": ???");
  }
}

for(var i=2; i<process.argv.length; i++) {
  switch(process.argv[i]) {
    case "-h": help(); process.exit(-1);
    case "-c": configdir = fs.realpathSync(process.argv[++i]); break;
    case "-i": do_index = true; break;
    case "-p": {
      var p = process.argv[++i].split(/:/);
      if(p.length == 1) p.unshift(null);
      if(p.length != 2) help("-p [ip:]port");
      port.push( [ parseInt(p[1]), p[0] ] );
      break;
    }
    case "-s": {
      var p = process.argv[++i].split(/:/);
      if(p.length == 1) p.unshift(null);
      if(p.length != 2) help("-s [ip:]port");
      sslport.push( [ parseInt(p[1]), p[0] ] );
      break;
    }
    case "-v": verify = true; break;
    case "--authtoken": {
        api_setup = true;
        auth_token = process.argv[++i];
        break;
    }
    case "--target": target = process.argv[++i]; break;
    case "--hostname": hostname = process.argv[++i]; break;
    case "--brokerid": brokerid = process.argv[++i]; break;
    case "--configfile": configfile = fs.realpathSync(process.argv[++i]); break;
    default: help("unknown argument: " + process.argv[i]);
  }
}
if(port.length == 0) port = defaultport;
if(do_index) {
  index(configdir);
  process.exit(0);
}
if(api_setup) {
  configure_circonus();
}
if(port.length == 0 && sslport.length == 0)
  help("must specify at least one of -p and -s");
if(sslport.length > 0) {
  try {
    // Setup creds
    creds.key = fs.readFileSync(path.join(configdir, "na.key")).toString();
    creds.crt = fs.readFileSync(path.join(configdir, "na.crt")).toString();
    if(verify) creds.ca = fs.readFileSync(path.join(configdir, "na.ca")).toString();
  } catch(e) {
    console.log("Make sure:");
    console.log("\tyour key is available: " + path.join(configdir, "na.key"));
    console.log("\tyour cert is available: " + path.join(configdir, "na.crt"));
    if(verify)
      console.log("\tyour ca is available: " + path.join(configdir, "na.ca"));
    console.log("\n" + e);
    process.exit(-1);
  }
}

function onchange(cb) { return function(c,p) { if(c.ino != p.ino || c.size != p.size || c.mtime.valueOf() != p.mtime.valueOf() || c.mode != p.mode) cb(); }}

function initial_pass() {
  for(which in scripts) {
    if(!(which in scripts_once)) {
      init_script(scripts[which], function() {});
      scripts_once[which] = true;
    }
  }
}
function rescan_modules() {
  var progress = 0;
  var sweep = function () {
    if(progress != 0) return;
    for(var t in scripts) {
      if(scripts[t].generation < generation) {
        fs.unwatchFile(scripts[t].command);
        delete scripts[t];
        delete scripts_once[t];
      }
    }
    initial_pass();
  }
  generation++;
  fs.readdir(configdir, function(err, files) {
    for(var i = 0; i < files.length; i++) {
      var m = procre.exec(files[i]);
      if(!m) continue;
      var extension = ext.exec(files[i])[1];
      if (extension === "conf") continue;
      var filename = path.join(configdir, files[i]);
      fs.unwatchFile(filename);
      progress++;
      fs.stat(filename, (function(filename, name) {
        return function(serr, sb) {
          if(sb && sb.isFile())
            fs.watchFile(filename, onchange(rescan_modules));
          if(sb && sb.isFile() && (is_windows || sb.mode & 0111)) {
            if(!(name in scripts)) scripts[name] = {};
            var d = scripts[name];
            d.name = name;
            d.generation = generation;
            d.command = filename;
            d.running = false;
            d.sb = sb;
          }
          progress--;
          sweep();
        }
      })(filename,m[1]));
    }
  });
  sweep();
}

function init_script(d, cb) {
  if(d.running) {
    cb(d, past_results[d.name]);
    return;
  }

  get_config(d, cb);
}

function get_config(d, cb) {
  fs.exists(path.join(configdir, d.name + ".json"), function(exists) {
    if ( exists ) {
      fs.readFile(path.join(configdir, d.name + ".json"), function(err, data) {
        if (err) throw err;
        var json_config = JSON.parse(data);

        var instance_count = 0;
        for ( var instance in json_config ) instance_count++;

        // Add the number of time we will run this script to our
        // total run_count so we don't finish early.
        if ( instance_count > 1 ) run_count += instance_count - 1;
        for ( var instance in json_config ) {
          run_script(d, cb, json_config[instance], d.name + "`" + instance);
        }
      }); 
    }
    else {
      run_script(d, cb, [], d.name);
    }
  });
}

function run_script(d, cb, args, instance) {
  d.running = true;
  var proc_data = { data: '', lines: [], options: {} };
  d.last_start = +(new Date());
  var cmd = spawn(d.command, args);
  var kill_func = function() {
    cmd.stdin.destroy();
    cmd.stdout.destroy();
    cmd.stderr.destroy();
    cmd.kill();
  };
  var handle_output = function(d, cb, instance) {
    if(proc_data.timeout) clearTimeout(proc_data.timeout);
    d.last_finish = +(new Date());
    var i, results = {}, parts;
    try { results = JSON.parse(proc_data.lines.join(' ')); }
    catch(e) {
      for(i=0; i<proc_data.lines.length; i++) {
        var name, type, space, val, isnull;
        parts = /^\s*(metric\s+)?(\S+)\s+(string|int|float|[iIlLns])(\s*)(.*)$/.exec(proc_data.lines[i]);
        if (parts) {
          name = parts[2];
          type = parts[3];
          space = parts[4];
          val = parts[5];
          isnull = (space.length == 0 || val == "[[null]]");
          type = type.length > 1 ? type === "float" ? "n" : type.substr(0,1) : type;
          results[name] = { '_type': type,
                            '_value': isnull ? null : val
                          };
        }
      }
    }
    past_results[instance] = results;
    cb(d, results, instance);
  };
  cmd.stdout.on('end', function() {
    handle_output(d, cb, instance);
  });
  cmd.stdout.on('data', function(buff) {
    var offset;
    proc_data.data = proc_data.data + buff;
    while((offset = proc_data.data.indexOf('\n')) >= 0) {
      var line = proc_data.data.substring(0,
                     (offset > 0 &&
                      proc_data.data.charAt(offset-1) == '\r') ?
                         offset - 1 : offset);
      if(line.charAt(0) == '#') {
        try { proc_data.options = JSON.parse(line.substring(1)); }
        catch(e) { console.log("Error parsing proc otions: " + e); }
        if(proc_data.options.timeout)
          proc_data.timeout = setTimeout(kill_func,
                                         proc_data.options.timeout * 1000);
      }
      else {
        if(line.length) proc_data.lines.push(line);
        else handle_output(d, cb, instance);
      }
      proc_data.data = proc_data.data.substring(offset+1);
    }
  });
  cmd.on('exit', function(code, signal) {
    d.running = false;
  });
  cmd.on('error', function(err) {
    console.log("Error on " + d.command + " (" + err + "), removing from scripts");
    proc_data.data = "";
    d.running = false;
    delete scripts[d.name];
  });
}
function run_scripts(res, which) {
  run_count = 0;
  var set = {};
  var send_complete = function() {
    if(run_count != 0) return;
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.write(JSON.stringify(set));
    res.end();
  };

  if(which && !(which in scripts)) {
    res.writeHead(404);
    res.end();
  }
  else {
    for(file in scripts) {
      if ( which && file != which ) continue;
      run_count++;
    }
    for(file in scripts) {
      if ( which && file != which ) continue;
      init_script(scripts[file], function(d, results, name) {
        run_count--;
        set[name] = results;
        send_complete();
      });
    }
    send_complete();
  }
}
function handler(req, res) {
  req.addListener('end', function() {
    var m, path = url.parse(this.url).pathname;
    if(/^\/inventory/.test(path)) {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.write(JSON.stringify(scripts));
    }
    else if(/^\/(?:run)?$/.test(path)) return run_scripts(res);
    else if(m = /^\/run\/(.+)$/.exec(path)) return run_scripts(res, m[1]);
    else res.writeHead(404);
    res.end();
  });

  // if we don't have a data listener the stream starts paused in node 10+
  req.addListener('data', function(){});
}

function configure_circonus() {
  var error = false;
  if ( ! /^[0-9a-fA-F]{4}(?:[0-9a-fA-F]{4}-){4}[0-9a-fA-F]{12}$/.test(auth_token)  ) {
    console.log("--authtoken should be a UUID.");
    error = true;
  }
  if ( target === null ) {
    console.log("--target is required.");
    error = true;
  }
  if ( brokerid === null || ! /^\d+$/.test(brokerid) ) {
    console.log("--brokerid is required and should be an integer.");
    error = true;
  }
  if ( configfile === null ) {
    console.log("--configfile is required.");
    error = true;
  }
  if ( error ) {
    process.exit(1);
  }

  nadapi.configure(auth_token, target, hostname, brokerid, configfile);
}

if ( ! api_setup ) {
    fs.watchFile(configdir, onchange(rescan_modules));
    rescan_modules();

    try {
      for(var i=0; i<port.length; i++)
        http.createServer(handler).listen(port[i][0] , port[i][1]);
    } catch(e) {
      console.log("Failed to start server on port " + port + ": " + e);
      process.exit(-1);
    }
    try {
      for(var i=0; i<sslport.length; i++)
        https.createServer(creds).addListener(handler).listen(sslport[i][0], sslport[i][1]);
    } catch(e) {
      console.log("Failed to start server on port " + sslport + ": " + e);
      process.exit(-1);
    }
}
